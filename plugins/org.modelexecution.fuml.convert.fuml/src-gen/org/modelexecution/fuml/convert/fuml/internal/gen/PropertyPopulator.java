/*
* Copyright (c) 2013 Vienna University of Technology.
* All rights reserved. This program and the accompanying materials are made 
* available under the terms of the Eclipse Public License v1.0 which accompanies 
* this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
* 
* Contributors:
* Philip Langer - initial API and generator
* Tanja Mayerhofer - generator
*/
package org.modelexecution.fuml.convert.fuml.internal.gen;
    	
import javax.annotation.Generated;

import org.modelexecution.fuml.convert.fuml.internal.IElementPopulator;
import org.modelexecution.fuml.convert.impl.ConversionResultImpl;

@Generated(value="Generated by org.modelexecution.fuml.convert.fuml.gen.ElementPopulatorGenerator.xtend")
public class PropertyPopulator implements IElementPopulator {

	@Override
	public void populate(fUML.Syntax.Classes.Kernel.Element fumlElement,
		org.modelexecution.fuml.Syntax.Classes.Kernel.Element fumlElement_, 
		ConversionResultImpl result
		) {
			
		if (!(fumlElement_ instanceof org.modelexecution.fuml.Syntax.Classes.Kernel.Property) ||
			!(fumlElement instanceof fUML.Syntax.Classes.Kernel.Property)) {
			return;
		}
		
		fUML.Syntax.Classes.Kernel.Property fumlNamedElement = (fUML.Syntax.Classes.Kernel.Property) fumlElement;
		
		org.modelexecution.fuml.Syntax.Classes.Kernel.Property fumlNamedElement_ = (org.modelexecution.fuml.Syntax.Classes.Kernel.Property) fumlElement_;
		
		fumlNamedElement.isDerived = fumlNamedElement_.isDerived();
		fumlNamedElement.isDerivedUnion = fumlNamedElement_.isDerivedUnion();
		fumlNamedElement.aggregation = castAggregationKind(fumlNamedElement_.getAggregation());
		fumlNamedElement.isComposite = fumlNamedElement_.isComposite();
		fumlNamedElement.owningAssociation = (fUML.Syntax.Classes.Kernel.Association) result.getFUMLElement(fumlNamedElement_.getOwningAssociation());
		fumlNamedElement.association = (fUML.Syntax.Classes.Kernel.Association) result.getFUMLElement(fumlNamedElement_.getAssociation());
		fumlNamedElement.datatype = (fUML.Syntax.Classes.Kernel.DataType) result.getFUMLElement(fumlNamedElement_.getDatatype());
		fumlNamedElement.class_ = (fUML.Syntax.Classes.Kernel.Class_) result.getFUMLElement(fumlNamedElement_.getClass_());
		fumlNamedElement.opposite = (fUML.Syntax.Classes.Kernel.Property) result.getFUMLElement(fumlNamedElement_.getOpposite());
							
	}
	
	private fUML.Syntax.Classes.Kernel.AggregationKind castAggregationKind(org.modelexecution.fuml.Syntax.Classes.Kernel.AggregationKind enumVal) {
		switch (enumVal.getValue()) {
			case org.modelexecution.fuml.Syntax.Classes.Kernel.AggregationKind.NONE_VALUE:
				return fUML.Syntax.Classes.Kernel.AggregationKind.none;
			case org.modelexecution.fuml.Syntax.Classes.Kernel.AggregationKind.SHARED_VALUE:
				return fUML.Syntax.Classes.Kernel.AggregationKind.shared;
			case org.modelexecution.fuml.Syntax.Classes.Kernel.AggregationKind.COMPOSITE_VALUE:
				return fUML.Syntax.Classes.Kernel.AggregationKind.composite;
		}
		return null;
	}
}
