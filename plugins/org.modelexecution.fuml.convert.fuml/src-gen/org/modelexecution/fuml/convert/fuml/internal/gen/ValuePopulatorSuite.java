/*
* Copyright (c) 2013 Vienna University of Technology.
* All rights reserved. This program and the accompanying materials are made 
* available under the terms of the Eclipse Public License v1.0 which accompanies 
* this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
* 
* Contributors:
* Philip Langer - initial API and generator
* Tanja Mayerhofer - generator
*/
package org.modelexecution.fuml.convert.fuml.internal.gen;
    	
import java.util.ArrayList;
import java.util.Collection;

import javax.annotation.Generated;

import org.modelexecution.fuml.convert.IConversionResult;
import org.modelexecution.fuml.convert.IValueConversionResult;
import org.modelexecution.fuml.convert.fuml.internal.IValuePopulator;

@Generated(value="Generated by org.modelexecution.fuml.convert.fuml.gen.ElementPopulatorGenerator.xtend")
public class ValuePopulatorSuite {

	private Collection<IValuePopulator> elementPopulators = new ArrayList<>();

	private IConversionResult conversionResult;
	private IValueConversionResult valueConversionResult;

	public ValuePopulatorSuite(IConversionResult conversionResult, IValueConversionResult valueConversionResult) {
		this.conversionResult = conversionResult;
		this.valueConversionResult = valueConversionResult;
		initializePopulators();
	}

	private void initializePopulators() {
		elementPopulators.add(new FeatureValuePopulator());
		elementPopulators.add(new UnlimitedNaturalValuePopulator());
		elementPopulators.add(new PrimitiveValuePopulator());
		elementPopulators.add(new StringValuePopulator());
		elementPopulators.add(new ReferencePopulator());
		elementPopulators.add(new ObjectPopulator());
		elementPopulators.add(new CompoundValuePopulator());
		elementPopulators.add(new LinkPopulator());
		elementPopulators.add(new IntegerValuePopulator());
		elementPopulators.add(new EnumerationValuePopulator());
		elementPopulators.add(new DataValuePopulator());
		elementPopulators.add(new BooleanValuePopulator());
	}

	public void populate(Object fUMLElement,
			Object fumlElement_) {
		for (IValuePopulator populator : elementPopulators) {
			populator.populate(fUMLElement, fumlElement_, conversionResult, valueConversionResult);
		}
	}

}
