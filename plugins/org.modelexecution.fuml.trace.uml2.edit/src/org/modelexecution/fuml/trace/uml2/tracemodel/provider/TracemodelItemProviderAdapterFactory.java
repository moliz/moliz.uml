/**
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the Eclipse Public License v1.0 which accompanies 
 * this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * Tanja Mayerhofer - initial API and implementation
 */
package org.modelexecution.fuml.trace.uml2.tracemodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.modelexecution.fuml.trace.uml2.tracemodel.util.TracemodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TracemodelItemProviderAdapterFactory extends TracemodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TracemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.Trace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceItemProvider traceItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.Trace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceAdapter() {
		if (traceItemProvider == null) {
			traceItemProvider = new TraceItemProvider(this);
		}

		return traceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ActivityExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityExecutionItemProvider activityExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ActivityExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityExecutionAdapter() {
		if (activityExecutionItemProvider == null) {
			activityExecutionItemProvider = new ActivityExecutionItemProvider(this);
		}

		return activityExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.CallActionExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallActionExecutionItemProvider callActionExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.CallActionExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallActionExecutionAdapter() {
		if (callActionExecutionItemProvider == null) {
			callActionExecutionItemProvider = new CallActionExecutionItemProvider(this);
		}

		return callActionExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ObjectTokenInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectTokenInstanceItemProvider objectTokenInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ObjectTokenInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectTokenInstanceAdapter() {
		if (objectTokenInstanceItemProvider == null) {
			objectTokenInstanceItemProvider = new ObjectTokenInstanceItemProvider(this);
		}

		return objectTokenInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ControlTokenInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenInstanceItemProvider controlTokenInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ControlTokenInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenInstanceAdapter() {
		if (controlTokenInstanceItemProvider == null) {
			controlTokenInstanceItemProvider = new ControlTokenInstanceItemProvider(this);
		}

		return controlTokenInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ActionExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionExecutionItemProvider actionExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ActionExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionExecutionAdapter() {
		if (actionExecutionItemProvider == null) {
			actionExecutionItemProvider = new ActionExecutionItemProvider(this);
		}

		return actionExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ControlNodeExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeExecutionItemProvider controlNodeExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ControlNodeExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeExecutionAdapter() {
		if (controlNodeExecutionItemProvider == null) {
			controlNodeExecutionItemProvider = new ControlNodeExecutionItemProvider(this);
		}

		return controlNodeExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ValueInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueInstanceItemProvider valueInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ValueInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueInstanceAdapter() {
		if (valueInstanceItemProvider == null) {
			valueInstanceItemProvider = new ValueInstanceItemProvider(this);
		}

		return valueInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ValueSnapshot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueSnapshotItemProvider valueSnapshotItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ValueSnapshot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueSnapshotAdapter() {
		if (valueSnapshotItemProvider == null) {
			valueSnapshotItemProvider = new ValueSnapshotItemProvider(this);
		}

		return valueSnapshotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.DecisionNodeExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeExecutionItemProvider decisionNodeExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.DecisionNodeExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeExecutionAdapter() {
		if (decisionNodeExecutionItemProvider == null) {
			decisionNodeExecutionItemProvider = new DecisionNodeExecutionItemProvider(this);
		}

		return decisionNodeExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.StructuredActivityNodeExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredActivityNodeExecutionItemProvider structuredActivityNodeExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.StructuredActivityNodeExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredActivityNodeExecutionAdapter() {
		if (structuredActivityNodeExecutionItemProvider == null) {
			structuredActivityNodeExecutionItemProvider = new StructuredActivityNodeExecutionItemProvider(this);
		}

		return structuredActivityNodeExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputValueItemProvider inputValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputValueAdapter() {
		if (inputValueItemProvider == null) {
			inputValueItemProvider = new InputValueItemProvider(this);
		}

		return inputValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputValueItemProvider outputValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputValueAdapter() {
		if (outputValueItemProvider == null) {
			outputValueItemProvider = new OutputValueItemProvider(this);
		}

		return outputValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputParameterValueItemProvider inputParameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputParameterValueAdapter() {
		if (inputParameterValueItemProvider == null) {
			inputParameterValueItemProvider = new InputParameterValueItemProvider(this);
		}

		return inputParameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputParameterSetting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputParameterSettingItemProvider inputParameterSettingItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.InputParameterSetting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputParameterSettingAdapter() {
		if (inputParameterSettingItemProvider == null) {
			inputParameterSettingItemProvider = new InputParameterSettingItemProvider(this);
		}

		return inputParameterSettingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputParameterSetting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputParameterSettingItemProvider outputParameterSettingItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputParameterSetting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputParameterSettingAdapter() {
		if (outputParameterSettingItemProvider == null) {
			outputParameterSettingItemProvider = new OutputParameterSettingItemProvider(this);
		}

		return outputParameterSettingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputParameterValueItemProvider outputParameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.OutputParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputParameterValueAdapter() {
		if (outputParameterValueItemProvider == null) {
			outputParameterValueItemProvider = new OutputParameterValueItemProvider(this);
		}

		return outputParameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.InitialNodeExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeExecutionItemProvider initialNodeExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.InitialNodeExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeExecutionAdapter() {
		if (initialNodeExecutionItemProvider == null) {
			initialNodeExecutionItemProvider = new InitialNodeExecutionItemProvider(this);
		}

		return initialNodeExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ExpansionInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpansionInputItemProvider expansionInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ExpansionInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpansionInputAdapter() {
		if (expansionInputItemProvider == null) {
			expansionInputItemProvider = new ExpansionInputItemProvider(this);
		}

		return expansionInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelexecution.fuml.trace.uml2.tracemodel.ExpansionRegionExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpansionRegionExecutionItemProvider expansionRegionExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelexecution.fuml.trace.uml2.tracemodel.ExpansionRegionExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpansionRegionExecutionAdapter() {
		if (expansionRegionExecutionItemProvider == null) {
			expansionRegionExecutionItemProvider = new ExpansionRegionExecutionItemProvider(this);
		}

		return expansionRegionExecutionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (traceItemProvider != null) traceItemProvider.dispose();
		if (activityExecutionItemProvider != null) activityExecutionItemProvider.dispose();
		if (callActionExecutionItemProvider != null) callActionExecutionItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (objectTokenInstanceItemProvider != null) objectTokenInstanceItemProvider.dispose();
		if (controlTokenInstanceItemProvider != null) controlTokenInstanceItemProvider.dispose();
		if (actionExecutionItemProvider != null) actionExecutionItemProvider.dispose();
		if (controlNodeExecutionItemProvider != null) controlNodeExecutionItemProvider.dispose();
		if (valueInstanceItemProvider != null) valueInstanceItemProvider.dispose();
		if (valueSnapshotItemProvider != null) valueSnapshotItemProvider.dispose();
		if (decisionNodeExecutionItemProvider != null) decisionNodeExecutionItemProvider.dispose();
		if (structuredActivityNodeExecutionItemProvider != null) structuredActivityNodeExecutionItemProvider.dispose();
		if (inputValueItemProvider != null) inputValueItemProvider.dispose();
		if (outputValueItemProvider != null) outputValueItemProvider.dispose();
		if (inputParameterValueItemProvider != null) inputParameterValueItemProvider.dispose();
		if (inputParameterSettingItemProvider != null) inputParameterSettingItemProvider.dispose();
		if (outputParameterSettingItemProvider != null) outputParameterSettingItemProvider.dispose();
		if (outputParameterValueItemProvider != null) outputParameterValueItemProvider.dispose();
		if (initialNodeExecutionItemProvider != null) initialNodeExecutionItemProvider.dispose();
		if (expansionInputItemProvider != null) expansionInputItemProvider.dispose();
		if (expansionRegionExecutionItemProvider != null) expansionRegionExecutionItemProvider.dispose();
	}

}
